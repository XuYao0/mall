package org.example.mall.mbg;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * 自定义注释生成器
 * 作用：将数据库表字段的注释添加到生成的Model类属性上
 *
 * @author EMall System
 * @date 2025-08-26
 */
public class CommentGenerator implements org.mybatis.generator.api.CommentGenerator {

    private Properties properties;
    private boolean suppressDate;
    private boolean suppressAllComments;
    private boolean addRemarkComments;
    private SimpleDateFormat dateFormat;

    public CommentGenerator() {
        super();
        properties = new Properties();
        suppressDate = false;
        suppressAllComments = false;
        addRemarkComments = false;
    }

    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);

        suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));
        suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
        addRemarkComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));

        String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
        if (dateFormatString != null && !dateFormatString.isEmpty()) {
            dateFormat = new SimpleDateFormat(dateFormatString);
        }
    }

    /**
     * 为字段添加注释（核心方法）
     * 将数据库字段的COMMENT注释添加到Java属性上
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        // 获取数据库字段的注释
        String remarks = introspectedColumn.getRemarks();

        if (addRemarkComments && remarks != null && !remarks.trim().isEmpty()) {
            field.addJavaDocLine("/**");
            field.addJavaDocLine(" * " + remarks);
            field.addJavaDocLine(" */");
        }
    }

    /**
     * 为字段添加注释（重载方法）
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        field.addJavaDocLine("/**");
        field.addJavaDocLine(" * This field was generated by MyBatis Generator.");
        field.addJavaDocLine(" * This field corresponds to the database table " + introspectedTable.getFullyQualifiedTable());
        if (!suppressDate) {
            field.addJavaDocLine(" *");
            field.addJavaDocLine(" * @mbg.generated " + getDateString());
        }
        field.addJavaDocLine(" */");
    }

    /**
     * 为Model类添加注释
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine(" * " + introspectedTable.getFullyQualifiedTable() + " 表对应的实体类");

        String remarks = introspectedTable.getRemarks();
        if (addRemarkComments && remarks != null && !remarks.trim().isEmpty()) {
            topLevelClass.addJavaDocLine(" * " + remarks);
        }

        topLevelClass.addJavaDocLine(" *");
        topLevelClass.addJavaDocLine(" * @author MyBatis Generator");
        if (!suppressDate) {
            topLevelClass.addJavaDocLine(" * @date " + getDateString());
        }
        topLevelClass.addJavaDocLine(" */");
    }

    /**
     * 为Getter方法添加注释
     */
    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        String remarks = introspectedColumn.getRemarks();

        method.addJavaDocLine("/**");
        if (addRemarkComments && remarks != null && !remarks.trim().isEmpty()) {
            method.addJavaDocLine(" * 获取" + remarks);
        } else {
            method.addJavaDocLine(" * 获取" + introspectedColumn.getActualColumnName() + "字段值");
        }
        method.addJavaDocLine(" *");
        method.addJavaDocLine(" * @return " + introspectedColumn.getActualColumnName() + " " + (remarks != null ? remarks : ""));
        method.addJavaDocLine(" */");
    }

    /**
     * 为Setter方法添加注释
     */
    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }

        String remarks = introspectedColumn.getRemarks();

        method.addJavaDocLine("/**");
        if (addRemarkComments && remarks != null && !remarks.trim().isEmpty()) {
            method.addJavaDocLine(" * 设置" + remarks);
        } else {
            method.addJavaDocLine(" * 设置" + introspectedColumn.getActualColumnName() + "字段值");
        }
        method.addJavaDocLine(" *");
        method.addJavaDocLine(" * @param " + introspectedColumn.getJavaProperty() + " " + (remarks != null ? remarks : ""));
        method.addJavaDocLine(" */");
    }

    /**
     * 为通用方法添加注释
     */
    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        method.addJavaDocLine("/**");
        method.addJavaDocLine(" * This method was generated by MyBatis Generator.");
        method.addJavaDocLine(" * This method corresponds to the database table " + introspectedTable.getFullyQualifiedTable());
        if (!suppressDate) {
            method.addJavaDocLine(" *");
            method.addJavaDocLine(" * @mbg.generated " + getDateString());
        }
        method.addJavaDocLine(" */");
    }

    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        // 文件级别注释，一般不需要
    }

    @Override
    public void addComment(XmlElement xmlElement) {
        // XML注释，保持默认
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        // XML根元素注释，保持默认
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        innerClass.addJavaDocLine("/**");
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
        innerClass.addJavaDocLine(" * This class corresponds to the database table " + introspectedTable.getFullyQualifiedTable());
        if (!suppressDate) {
            innerClass.addJavaDocLine(" *");
            innerClass.addJavaDocLine(" * @mbg.generated " + getDateString());
        }
        innerClass.addJavaDocLine(" */");
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
        if (suppressAllComments) {
            return;
        }

        innerClass.addJavaDocLine("/**");
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
        innerClass.addJavaDocLine(" * This class corresponds to the database table " + introspectedTable.getFullyQualifiedTable());
        if (!suppressDate) {
            innerClass.addJavaDocLine(" *");
            innerClass.addJavaDocLine(" * @mbg.generated " + getDateString());
        }
        if (markAsDoNotDelete) {
            innerClass.addJavaDocLine(" *");
            innerClass.addJavaDocLine(" * " + MergeConstants.NEW_ELEMENT_TAG);
        }
        innerClass.addJavaDocLine(" */");
    }

    @Override
    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        innerEnum.addJavaDocLine("/**");
        innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator.");
        innerEnum.addJavaDocLine(" * This enum corresponds to the database table " + introspectedTable.getFullyQualifiedTable());
        if (!suppressDate) {
            innerEnum.addJavaDocLine(" *");
            innerEnum.addJavaDocLine(" * @mbg.generated " + getDateString());
        }
        innerEnum.addJavaDocLine(" */");
    }

    /**
     * 获取当前日期字符串
     */
    protected String getDateString() {
        if (suppressDate) {
            return null;
        } else if (dateFormat != null) {
            return dateFormat.format(new Date());
        } else {
            return new Date().toString();
        }
    }

    /**
     * 判断属性值是否为true
     */
    protected boolean isTrue(String property) {
        return "true".equalsIgnoreCase(property);
    }
}
